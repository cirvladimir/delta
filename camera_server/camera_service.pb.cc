// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera_service.proto

#include "camera_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CameraDetectionRequest::CameraDetectionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CameraDetectionRequestDefaultTypeInternal {
  constexpr CameraDetectionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraDetectionRequestDefaultTypeInternal() {}
  union {
    CameraDetectionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraDetectionRequestDefaultTypeInternal _CameraDetectionRequest_default_instance_;
constexpr DetectedObject::DetectedObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , time_(0)
  , dx_(0)
  , dy_(0)
  , length_(0){}
struct DetectedObjectDefaultTypeInternal {
  constexpr DetectedObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DetectedObjectDefaultTypeInternal() {}
  union {
    DetectedObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DetectedObjectDefaultTypeInternal _DetectedObject_default_instance_;
constexpr CameraDetectionResponse::CameraDetectionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : detected_objects_(){}
struct CameraDetectionResponseDefaultTypeInternal {
  constexpr CameraDetectionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraDetectionResponseDefaultTypeInternal() {}
  union {
    CameraDetectionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraDetectionResponseDefaultTypeInternal _CameraDetectionResponse_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_camera_5fservice_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_camera_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_camera_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_camera_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CameraDetectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DetectedObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DetectedObject, x_),
  PROTOBUF_FIELD_OFFSET(::DetectedObject, y_),
  PROTOBUF_FIELD_OFFSET(::DetectedObject, time_),
  PROTOBUF_FIELD_OFFSET(::DetectedObject, dx_),
  PROTOBUF_FIELD_OFFSET(::DetectedObject, dy_),
  PROTOBUF_FIELD_OFFSET(::DetectedObject, length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CameraDetectionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CameraDetectionResponse, detected_objects_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CameraDetectionRequest)},
  { 5, -1, sizeof(::DetectedObject)},
  { 16, -1, sizeof(::CameraDetectionResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CameraDetectionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DetectedObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CameraDetectionResponse_default_instance_),
};

const char descriptor_table_protodef_camera_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024camera_service.proto\"\030\n\026CameraDetectio"
  "nRequest\"\\\n\016DetectedObject\022\t\n\001x\030\001 \001(\002\022\t\n"
  "\001y\030\002 \001(\002\022\014\n\004time\030\003 \001(\001\022\n\n\002dx\030\004 \001(\002\022\n\n\002dy"
  "\030\005 \001(\002\022\016\n\006length\030\006 \001(\002\"D\n\027CameraDetectio"
  "nResponse\022)\n\020detected_objects\030\001 \003(\0132\017.De"
  "tectedObject2W\n\026CameraDetectionService\022="
  "\n\006Detect\022\027.CameraDetectionRequest\032\030.Came"
  "raDetectionResponse\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_camera_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_camera_5fservice_2eproto = {
  false, false, 309, descriptor_table_protodef_camera_5fservice_2eproto, "camera_service.proto", 
  &descriptor_table_camera_5fservice_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_camera_5fservice_2eproto::offsets,
  file_level_metadata_camera_5fservice_2eproto, file_level_enum_descriptors_camera_5fservice_2eproto, file_level_service_descriptors_camera_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_camera_5fservice_2eproto_getter() {
  return &descriptor_table_camera_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_camera_5fservice_2eproto(&descriptor_table_camera_5fservice_2eproto);

// ===================================================================

class CameraDetectionRequest::_Internal {
 public:
};

CameraDetectionRequest::CameraDetectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CameraDetectionRequest)
}
CameraDetectionRequest::CameraDetectionRequest(const CameraDetectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CameraDetectionRequest)
}

inline void CameraDetectionRequest::SharedCtor() {
}

CameraDetectionRequest::~CameraDetectionRequest() {
  // @@protoc_insertion_point(destructor:CameraDetectionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CameraDetectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CameraDetectionRequest::ArenaDtor(void* object) {
  CameraDetectionRequest* _this = reinterpret_cast< CameraDetectionRequest* >(object);
  (void)_this;
}
void CameraDetectionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraDetectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CameraDetectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CameraDetectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraDetectionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraDetectionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CameraDetectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CameraDetectionRequest)
  return target;
}

size_t CameraDetectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CameraDetectionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraDetectionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CameraDetectionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraDetectionRequest::GetClassData() const { return &_class_data_; }

void CameraDetectionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CameraDetectionRequest *>(to)->MergeFrom(
      static_cast<const CameraDetectionRequest &>(from));
}


void CameraDetectionRequest::MergeFrom(const CameraDetectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CameraDetectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraDetectionRequest::CopyFrom(const CameraDetectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CameraDetectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraDetectionRequest::IsInitialized() const {
  return true;
}

void CameraDetectionRequest::InternalSwap(CameraDetectionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraDetectionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_camera_5fservice_2eproto_getter, &descriptor_table_camera_5fservice_2eproto_once,
      file_level_metadata_camera_5fservice_2eproto[0]);
}

// ===================================================================

class DetectedObject::_Internal {
 public:
};

DetectedObject::DetectedObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DetectedObject)
}
DetectedObject::DetectedObject(const DetectedObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&x_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:DetectedObject)
}

inline void DetectedObject::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&x_)) + sizeof(length_));
}

DetectedObject::~DetectedObject() {
  // @@protoc_insertion_point(destructor:DetectedObject)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DetectedObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DetectedObject::ArenaDtor(void* object) {
  DetectedObject* _this = reinterpret_cast< DetectedObject* >(object);
  (void)_this;
}
void DetectedObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetectedObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DetectedObject::Clear() {
// @@protoc_insertion_point(message_clear_start:DetectedObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&x_)) + sizeof(length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectedObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float dx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          dx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          dy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectedObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DetectedObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // double time = 3;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_time(), target);
  }

  // float dx = 4;
  if (!(this->_internal_dx() <= 0 && this->_internal_dx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_dx(), target);
  }

  // float dy = 5;
  if (!(this->_internal_dy() <= 0 && this->_internal_dy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_dy(), target);
  }

  // float length = 6;
  if (!(this->_internal_length() <= 0 && this->_internal_length() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DetectedObject)
  return target;
}

size_t DetectedObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DetectedObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    total_size += 1 + 4;
  }

  // double time = 3;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    total_size += 1 + 8;
  }

  // float dx = 4;
  if (!(this->_internal_dx() <= 0 && this->_internal_dx() >= 0)) {
    total_size += 1 + 4;
  }

  // float dy = 5;
  if (!(this->_internal_dy() <= 0 && this->_internal_dy() >= 0)) {
    total_size += 1 + 4;
  }

  // float length = 6;
  if (!(this->_internal_length() <= 0 && this->_internal_length() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectedObject::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DetectedObject::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectedObject::GetClassData() const { return &_class_data_; }

void DetectedObject::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DetectedObject *>(to)->MergeFrom(
      static_cast<const DetectedObject &>(from));
}


void DetectedObject::MergeFrom(const DetectedObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DetectedObject)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_x() <= 0 && from._internal_x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from._internal_y() <= 0 && from._internal_y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from._internal_time() <= 0 && from._internal_time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
  if (!(from._internal_dx() <= 0 && from._internal_dx() >= 0)) {
    _internal_set_dx(from._internal_dx());
  }
  if (!(from._internal_dy() <= 0 && from._internal_dy() >= 0)) {
    _internal_set_dy(from._internal_dy());
  }
  if (!(from._internal_length() <= 0 && from._internal_length() >= 0)) {
    _internal_set_length(from._internal_length());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectedObject::CopyFrom(const DetectedObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DetectedObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedObject::IsInitialized() const {
  return true;
}

void DetectedObject::InternalSwap(DetectedObject* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectedObject, length_)
      + sizeof(DetectedObject::length_)
      - PROTOBUF_FIELD_OFFSET(DetectedObject, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedObject::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_camera_5fservice_2eproto_getter, &descriptor_table_camera_5fservice_2eproto_once,
      file_level_metadata_camera_5fservice_2eproto[1]);
}

// ===================================================================

class CameraDetectionResponse::_Internal {
 public:
};

CameraDetectionResponse::CameraDetectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  detected_objects_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CameraDetectionResponse)
}
CameraDetectionResponse::CameraDetectionResponse(const CameraDetectionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      detected_objects_(from.detected_objects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CameraDetectionResponse)
}

inline void CameraDetectionResponse::SharedCtor() {
}

CameraDetectionResponse::~CameraDetectionResponse() {
  // @@protoc_insertion_point(destructor:CameraDetectionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CameraDetectionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CameraDetectionResponse::ArenaDtor(void* object) {
  CameraDetectionResponse* _this = reinterpret_cast< CameraDetectionResponse* >(object);
  (void)_this;
}
void CameraDetectionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraDetectionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CameraDetectionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CameraDetectionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detected_objects_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraDetectionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DetectedObject detected_objects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_detected_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraDetectionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CameraDetectionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DetectedObject detected_objects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_detected_objects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_detected_objects(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CameraDetectionResponse)
  return target;
}

size_t CameraDetectionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CameraDetectionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DetectedObject detected_objects = 1;
  total_size += 1UL * this->_internal_detected_objects_size();
  for (const auto& msg : this->detected_objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraDetectionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CameraDetectionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraDetectionResponse::GetClassData() const { return &_class_data_; }

void CameraDetectionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CameraDetectionResponse *>(to)->MergeFrom(
      static_cast<const CameraDetectionResponse &>(from));
}


void CameraDetectionResponse::MergeFrom(const CameraDetectionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CameraDetectionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detected_objects_.MergeFrom(from.detected_objects_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraDetectionResponse::CopyFrom(const CameraDetectionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CameraDetectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraDetectionResponse::IsInitialized() const {
  return true;
}

void CameraDetectionResponse::InternalSwap(CameraDetectionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  detected_objects_.InternalSwap(&other->detected_objects_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraDetectionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_camera_5fservice_2eproto_getter, &descriptor_table_camera_5fservice_2eproto_once,
      file_level_metadata_camera_5fservice_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CameraDetectionRequest* Arena::CreateMaybeMessage< ::CameraDetectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CameraDetectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DetectedObject* Arena::CreateMaybeMessage< ::DetectedObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DetectedObject >(arena);
}
template<> PROTOBUF_NOINLINE ::CameraDetectionResponse* Arena::CreateMaybeMessage< ::CameraDetectionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CameraDetectionResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
